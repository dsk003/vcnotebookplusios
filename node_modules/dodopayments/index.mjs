// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _DodoPayments_instances, _a, _DodoPayments_baseURLOverridden;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Pagination from "./pagination.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { AddonResponsesDefaultPageNumberPagination, Addons, } from "./resources/addons.mjs";
import { Brands, } from "./resources/brands.mjs";
import { CheckoutSessions, } from "./resources/checkout-sessions.mjs";
import { Discounts, DiscountsDefaultPageNumberPagination, } from "./resources/discounts.mjs";
import { DisputeListResponsesDefaultPageNumberPagination, Disputes, } from "./resources/disputes.mjs";
import { LicenseKeyInstances, LicenseKeyInstancesDefaultPageNumberPagination, } from "./resources/license-key-instances.mjs";
import { LicenseKeys, LicenseKeysDefaultPageNumberPagination, } from "./resources/license-keys.mjs";
import { Licenses, } from "./resources/licenses.mjs";
import { Meters, MetersDefaultPageNumberPagination, } from "./resources/meters.mjs";
import { Misc, } from "./resources/misc.mjs";
import { PaymentListResponsesDefaultPageNumberPagination, Payments, } from "./resources/payments.mjs";
import { PayoutListResponsesDefaultPageNumberPagination, Payouts, } from "./resources/payouts.mjs";
import { RefundListResponsesDefaultPageNumberPagination, Refunds, } from "./resources/refunds.mjs";
import { SubscriptionListResponsesDefaultPageNumberPagination, SubscriptionRetrieveUsageHistoryResponsesDefaultPageNumberPagination, Subscriptions, } from "./resources/subscriptions.mjs";
import { EventsDefaultPageNumberPagination, UsageEvents, } from "./resources/usage-events.mjs";
import { WebhookEvents } from "./resources/webhook-events.mjs";
import { Customers, CustomersDefaultPageNumberPagination, } from "./resources/customers/customers.mjs";
import { Invoices } from "./resources/invoices/invoices.mjs";
import { ProductListResponsesDefaultPageNumberPagination, Products, } from "./resources/products/products.mjs";
import { WebhookDetailsCursorPagePagination, Webhooks, } from "./resources/webhooks/webhooks.mjs";
const environments = {
    live_mode: 'https://live.dodopayments.com',
    test_mode: 'https://test.dodopayments.com',
};
/**
 * API Client for interfacing with the Dodo Payments API.
 */
export class DodoPayments extends Core.APIClient {
    /**
     * API Client for interfacing with the Dodo Payments API.
     *
     * @param {string | undefined} [opts.bearerToken=process.env['DODO_PAYMENTS_API_KEY'] ?? undefined]
     * @param {Environment} [opts.environment=live_mode] - Specifies the environment URL to use for the API.
     * @param {string} [opts.baseURL=process.env['DODO_PAYMENTS_BASE_URL'] ?? https://live.dodopayments.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('DODO_PAYMENTS_BASE_URL'), bearerToken = Core.readEnv('DODO_PAYMENTS_API_KEY'), ...opts } = {}) {
        if (bearerToken === undefined) {
            throw new Errors.DodoPaymentsError("The DODO_PAYMENTS_API_KEY environment variable is missing or empty; either provide it, or instantiate the DodoPayments client with an bearerToken option, like new DodoPayments({ bearerToken: 'My Bearer Token' }).");
        }
        const options = {
            bearerToken,
            ...opts,
            baseURL,
            environment: opts.environment ?? 'live_mode',
        };
        if (baseURL && opts.environment) {
            throw new Errors.DodoPaymentsError('Ambiguous URL; The `baseURL` option (or DODO_PAYMENTS_BASE_URL env var) and the `environment` option are given. If you want to use the environment you must pass baseURL: null');
        }
        super({
            baseURL: options.baseURL || environments[options.environment || 'live_mode'],
            baseURLOverridden: baseURL ? baseURL !== environments[options.environment || 'live_mode'] : false,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        _DodoPayments_instances.add(this);
        this.checkoutSessions = new API.CheckoutSessions(this);
        this.payments = new API.Payments(this);
        this.subscriptions = new API.Subscriptions(this);
        this.invoices = new API.Invoices(this);
        this.licenses = new API.Licenses(this);
        this.licenseKeys = new API.LicenseKeys(this);
        this.licenseKeyInstances = new API.LicenseKeyInstances(this);
        this.customers = new API.Customers(this);
        this.refunds = new API.Refunds(this);
        this.disputes = new API.Disputes(this);
        this.payouts = new API.Payouts(this);
        this.webhookEvents = new API.WebhookEvents(this);
        this.products = new API.Products(this);
        this.misc = new API.Misc(this);
        this.discounts = new API.Discounts(this);
        this.addons = new API.Addons(this);
        this.brands = new API.Brands(this);
        this.webhooks = new API.Webhooks(this);
        this.usageEvents = new API.UsageEvents(this);
        this.meters = new API.Meters(this);
        this._options = options;
        this.bearerToken = bearerToken;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.bearerToken}` };
    }
}
_a = DodoPayments, _DodoPayments_instances = new WeakSet(), _DodoPayments_baseURLOverridden = function _DodoPayments_baseURLOverridden() {
    return this.baseURL !== environments[this._options.environment || 'live_mode'];
};
DodoPayments.DodoPayments = _a;
DodoPayments.DEFAULT_TIMEOUT = 60000; // 1 minute
DodoPayments.DodoPaymentsError = Errors.DodoPaymentsError;
DodoPayments.APIError = Errors.APIError;
DodoPayments.APIConnectionError = Errors.APIConnectionError;
DodoPayments.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
DodoPayments.APIUserAbortError = Errors.APIUserAbortError;
DodoPayments.NotFoundError = Errors.NotFoundError;
DodoPayments.ConflictError = Errors.ConflictError;
DodoPayments.RateLimitError = Errors.RateLimitError;
DodoPayments.BadRequestError = Errors.BadRequestError;
DodoPayments.AuthenticationError = Errors.AuthenticationError;
DodoPayments.InternalServerError = Errors.InternalServerError;
DodoPayments.PermissionDeniedError = Errors.PermissionDeniedError;
DodoPayments.UnprocessableEntityError = Errors.UnprocessableEntityError;
DodoPayments.toFile = Uploads.toFile;
DodoPayments.fileFromPath = Uploads.fileFromPath;
DodoPayments.CheckoutSessions = CheckoutSessions;
DodoPayments.Payments = Payments;
DodoPayments.PaymentListResponsesDefaultPageNumberPagination =
    PaymentListResponsesDefaultPageNumberPagination;
DodoPayments.Subscriptions = Subscriptions;
DodoPayments.SubscriptionListResponsesDefaultPageNumberPagination =
    SubscriptionListResponsesDefaultPageNumberPagination;
DodoPayments.SubscriptionRetrieveUsageHistoryResponsesDefaultPageNumberPagination =
    SubscriptionRetrieveUsageHistoryResponsesDefaultPageNumberPagination;
DodoPayments.Invoices = Invoices;
DodoPayments.Licenses = Licenses;
DodoPayments.LicenseKeys = LicenseKeys;
DodoPayments.LicenseKeysDefaultPageNumberPagination = LicenseKeysDefaultPageNumberPagination;
DodoPayments.LicenseKeyInstances = LicenseKeyInstances;
DodoPayments.LicenseKeyInstancesDefaultPageNumberPagination = LicenseKeyInstancesDefaultPageNumberPagination;
DodoPayments.Customers = Customers;
DodoPayments.CustomersDefaultPageNumberPagination = CustomersDefaultPageNumberPagination;
DodoPayments.Refunds = Refunds;
DodoPayments.RefundListResponsesDefaultPageNumberPagination = RefundListResponsesDefaultPageNumberPagination;
DodoPayments.Disputes = Disputes;
DodoPayments.DisputeListResponsesDefaultPageNumberPagination =
    DisputeListResponsesDefaultPageNumberPagination;
DodoPayments.Payouts = Payouts;
DodoPayments.PayoutListResponsesDefaultPageNumberPagination = PayoutListResponsesDefaultPageNumberPagination;
DodoPayments.WebhookEvents = WebhookEvents;
DodoPayments.Products = Products;
DodoPayments.ProductListResponsesDefaultPageNumberPagination =
    ProductListResponsesDefaultPageNumberPagination;
DodoPayments.Misc = Misc;
DodoPayments.Discounts = Discounts;
DodoPayments.DiscountsDefaultPageNumberPagination = DiscountsDefaultPageNumberPagination;
DodoPayments.Addons = Addons;
DodoPayments.AddonResponsesDefaultPageNumberPagination = AddonResponsesDefaultPageNumberPagination;
DodoPayments.Brands = Brands;
DodoPayments.Webhooks = Webhooks;
DodoPayments.WebhookDetailsCursorPagePagination = WebhookDetailsCursorPagePagination;
DodoPayments.UsageEvents = UsageEvents;
DodoPayments.EventsDefaultPageNumberPagination = EventsDefaultPageNumberPagination;
DodoPayments.Meters = Meters;
DodoPayments.MetersDefaultPageNumberPagination = MetersDefaultPageNumberPagination;
export { toFile, fileFromPath } from "./uploads.mjs";
export { DodoPaymentsError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default DodoPayments;
//# sourceMappingURL=index.mjs.map